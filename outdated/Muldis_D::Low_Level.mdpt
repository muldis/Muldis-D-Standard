`THIS FILE IS OBSOLETE, THE GRAMMAR SUBSUMES IT.`

Muldis_D:Plain_Text:"http://muldis.com":"0.200";

script ASCII;

package MDLL ::= Muldis_D::Low_Level:"http://muldis.com":"0.200";

searching [MDLL];

`#########################################################################`

`A Universal is a generic ordered list of 0..N elements; but you don't
   access elements using numeric indexes but rather without any indexes.
   One can conceive of implementing the general case of an Universal either
   with an array or singly-linked list, where either is copy-on-write;
   all of the fundamental operators are abstract enough to work either way.
   This is exposed in the high level type system as Universal.`

MDLL.Universal ::= type of (isa \*^1[maximal_type])
    where true() default empty();

`#########################################################################`

MDLL.Universal.empty ::= constant \*^1[constant_empty];

`Note, prepend has 2 conceptual arguments, in order ["elem","to"].`

MDLL.Universal.prepend ::= function --> Universal <-- Universal
    requires (
           is_empty(*topic)                           ?? false()
        !! is_empty(*nonfirst(*topic))              ?? false()
        !! is_empty(*nonfirst(*nonfirst(*topic))) ?? true()
        !! false()
    )
    : \*^1[function_prepend,first(*topic),first(*nonfirst(*topic))];

MDLL.Universal.is_empty ::= function --> Boolean <-- Universal
    : \*^1[function_is_empty,topic];

MDLL.Universal.first ::= function --> Universal <-- Universal
    requires (is_empty(*topic) ?? false() !! true()) : \*^1[function_first,topic];

MDLL.Universal.nonfirst ::= function --> Universal <-- Universal
    requires (is_empty(*topic) ?? false() !! true()) : \*^1[function_nonfirst,topic];

`#########################################################################`

`A Boolean is a list of exactly 0 (false) or 1 (true) elements, in the
   latter case whose sole element is the empty list.
   This is exposed in the high level type system as Boolean.`

MDLL.Boolean ::= type of Universal
    where (
           is_empty(*topic)              ?? true()
        !! is_empty(*nonfirst(*topic)) ?? is_empty(*first(*topic))
        !! false()
    )
    default false();

MDLL.Boolean.false ::= synonym of empty;

MDLL.Boolean.true ::= constant prepend(*\*:[empty(),empty()]);

`#########################################################################`

MDLL.Universal.Pair_of_Universal ::= type of Universal
    where (
           is_empty(*topic)                           ?? false()
        !! is_empty(*nonfirst(*topic))              ?? false()
        !! is_empty(*nonfirst(*nonfirst(*topic))) ?? true()
        !! false()
    )
    default prepend(*\*:[empty(),
        prepend(*\*:[empty(),empty()])]);

`#########################################################################`

MDLL.Universal.same ::= function
    --> Boolean <-- Pair_of_Universal is_commutative
: (
    lhs ::= first(*topic);
    rhs ::= second(*topic);
    <-- is_empty(*lhs) ?? is_empty(*rhs)
     !! is_empty(*rhs) ?? false()
     !! 0(*\*:[first(*lhs),first(*rhs)])
        ?? 0(*\*:[nonfirst(*lhs),nonfirst(*rhs)])
     !! false()
);

MDLL.Universal.in_order ::= function
    --> Boolean <-- Pair_of_Universal
: (
    lhs ::= first(*topic);
    rhs ::= second(*topic);
    <-- is_empty(*lhs) ?? true()
     !! is_empty(*rhs) ?? false()
     !! same(*\*:[first(*lhs),first(*rhs)])
        ?? 0(*\*:[nonfirst(*lhs),nonfirst(*rhs)])
     !! 0(*\*:[first(*lhs),first(*rhs)])
);

MDLL.Universal.elems_in_order ::= function
    --> Boolean <-- Universal
: (
       is_empty(*topic)                            ?? true()
    !! is_empty(*nonfirst(*topic))               ?? true()
    !! in_order(*\*:[first(*topic),second(*topic)]) ?? 0(*nonfirst(*topic))
    !! false()
);

MDLL.Universal.second ::= function --> Universal <-- Universal
    requires (is_empty(*topic) ?? false() !! true())
    : first(*nonfirst(*topic));

MDLL.Universal.last ::= function --> Universal <-- Universal
    requires (is_empty(*topic) ?? false() !! true())
    : (is_empty(*nonfirst(*topic)) ?? first(*topic) !! 0(*nonfirst(*topic)));

MDLL.Universal.nonlast ::= function --> Universal <-- Universal
    requires (is_empty(*topic) ?? false() !! true())
    : (is_empty(*nonfirst(*topic)) ?? empty()
        !! prepend(*\*:[first(*topic),0(*nonfirst(*topic))]));

MDLL.Universal.catenate ::= function
    --> Universal <-- Pair_of_Universal
: (
    lhs ::= first(*topic);
    rhs ::= second(*topic);
    <-- is_empty(*lhs) ?? rhs !! is_empty(*rhs) ?? lhs
        !! 0(*\*:[nonlast(*lhs),prepend(*\*:[last(*lhs),rhs])]);
);

`#########################################################################`

`A Natural is a list of 0..N elements where each element is an empty
   list; the numeric value (0..N) is equal to the count of elements.
   This is not exposed in the high-level type system at all.`

MDLL.Natural ::= type of Universal
    where (is_empty(*topic) ?? true()
        !! is_empty(*first(*topic)) ?? 0(*nonfirst(*topic)) !! false());

MDLL.Natural.zero ::= synonym of empty;

MDLL.Natural.is_zero ::= synonym of is_empty;

MDLL.Natural.pred ::= function --> Natural <-- Natural
    requires (is_zero(*topic) ?? false() !! true()) : nonfirst(*topic);

MDLL.Natural.succ ::= function --> Natural <-- Natural
    : prepend(*\*:[empty(),topic]);

MDLL.N1 ::= constant succ(*zero());
MDLL.N2 ::= constant succ(*N1());
MDLL.N3 ::= constant succ(*N2());
MDLL.N4 ::= constant succ(*N3());
MDLL.N5 ::= constant succ(*N4());
MDLL.N6 ::= constant succ(*N5());
MDLL.N7 ::= constant succ(*N6());
MDLL.N8 ::= constant succ(*N7());
MDLL.N9 ::= constant succ(*N8());
MDLL.N10 ::= constant succ(*N9());

MDLL.Natural.Pair_of_Natural ::= type of Pair_of_Universal
    where (first(*topic) isa $Natural
        ?? second(*topic) isa $Natural !! false());

MDLL.Natural.plus ::= function
    --> Natural <-- Pair_of_Natural
    is_commutative is_associative identity zero()
: (
    augend ::= first(*topic);
    addend ::= second(*topic);
    <-- is_zero(*augend) ?? addend !! is_zero(*addend) ?? augend
        !! 0(*\*:[succ(*augend),pred(*addend)])
);

MDLL.Natural.minus ::= function
    --> Natural <-- Pair_of_Natural
    requires in_order(*\*:[second(*topic),first(*topic)])
: (
    minuend ::= first(*topic);
    subtrahend ::= second(*topic);
    <-- is_zero(*subtrahend) ?? minuend !! same(*\*:[minuend,subtrahend]) ?? zero()
        !! 0(*\*:[pred(*minuend),pred(*subtrahend)])
);

MDLL.Natural.times ::= function
    --> Natural <-- Pair_of_Natural
    is_commutative is_associative identity N1()
: (
    multiplicand ::= first(*topic);
    multiplier ::= second(*topic);
    <-- same(*\*:[multiplicand,N1()]) ?? multiplier !! same(*\*:[multiplier,N1()]) ?? multiplicand
        !! is_zero(*multiplicand) ?? zero() !! is_zero(*multiplier) ?? zero()
        !! plus(*\*:[multiplicand,0(*\*:[multiplicand,pred(*multiplier)])])
);

MDLL.Natural.divide ::= function
    --> Natural <-- Pair_of_Natural
    requires (is_zero(*second(*topic)) ?? false() !! true())
: (
    dividend ::= first(*topic);
    divisor ::= second(*topic);
    <-- same(*\*:[divisor,N1()]) ?? dividend !! same(*\*:[dividend,divisor]) ?? N1()
        !! in_order(*\*:[dividend,divisor]) ?? zero()
        !! succ(*0(*\*:[minus(*\*:[dividend,divisor]),divisor]))
);

`#########################################################################`

MDLL.Universal.count ::= function --> Natural <-- Universal
    : (is_empty(*topic) ?? zero() !! succ(*0(*nonfirst(*topic))));

MDLL.Universal.elem ::= function
    --> Universal <-- Pair_of_Universal
    requires (
        list ::= first(*topic);
        index ::= second(*topic);
        <-- index isa $Natural ?? in_order(*\*:[succ(*index),count(*list)]) !! false()
    )
: (
    list ::= first(*topic);
    index ::= second(*topic);
    <-- is_zero(*index) ?? first(*list) !! 0(*\*:[nonfirst(*list),pred(*index)])
);

`Note that slice() can only return a non-empty list slice.`

MDLL.Universal.slice ::= function
    --> Universal <-- Pair_of_Universal
    requires (
        list ::= first(*topic);
        range ::= second(*topic);
        if range isa $Pair_of_Natural then
          (
            first_index ::= first(*range);
            last_index ::= second(*range);
            <-- in_order(*\*:[first_index,last_index])
                ?? in_order(*\*:[succ(*last_index),count(*list)])
                !! false()
          )
        else false();
    )
: (
    list ::= first(*topic);
    range ::= second(*topic);
    first_index ::= first(*range);
    last_index ::= second(*range);
    <-- is_empty(*nonfirst(*list)) ?? list
     !! is_zero(*first_index) ?? prepend(*\*:[first(*list), 
        0(*\*:[nonfirst(*list),\*:[first_index,pred(*last_index)]])])
     !! 0(*\*:[nonfirst(*list),\*:[pred(*first_index),pred(*last_index)]]);
);

MDLL.Universal.every_elem_same_count ::= function
    --> Boolean <-- Universal
: (
       is_empty(*topic)              ?? true()
    !! is_empty(*nonfirst(*topic)) ?? true()
    !! same(*\*:[count(*first(*topic)),count(*second(*topic))])
        ?? 0(*nonfirst(*topic))
    !! false()
);

`#########################################################################`

MDLL.Structure.Structure_Base ::= type of Pair_of_Universal
    where (first(*topic) isa $Natural);

MDLL.Structure ::=
    type union {Integer,String,Array,Heading,Renaming,Tuple
    ,Relation,Identifier,Capsule,Stream,External}
    default false();

MDLL.Structure.structure_kind ::= function
    --> Universal <-- Structure_Base : first(*topic);

MDLL.Structure.payload ::= function
    --> Universal <-- Structure_Base : second(*topic);

`#########################################################################`

MDLL.Structure.SK_INTEGER    ::= synonym of zero;
MDLL.Structure.SK_STRING     ::= synonym of N1;
MDLL.Structure.SK_ARRAY      ::= synonym of N2;
MDLL.Structure.SK_HEADING    ::= synonym of N3;
MDLL.Structure.SK_RENAMING   ::= synonym of N4;
MDLL.Structure.SK_TUPLE      ::= synonym of N5;
MDLL.Structure.SK_RELATION   ::= synonym of N6;
MDLL.Structure.SK_IDENTIFIER ::= synonym of N7;
MDLL.Structure.SK_CAPSULE    ::= synonym of N8;
MDLL.Structure.SK_STREAM     ::= synonym of N9;
MDLL.Structure.SK_EXTERNAL   ::= synonym of N10;

`#########################################################################`

`An Integer payload is a list of exactly 2 elements where the first
   element is
   false if the numeric value is >= 0 and true if the numeric value
   is < 0; that first element can be read as "is negative (false/true)".
   The second element is a Natural that defines the magnitude of the
   integer's numeric value.  Every combination of first/second elements is
   valid with the sole exception of [true,0] as we don't want 2 zero ints.
   This is exposed in the high level type system as Integer.`

MDLL.Integer ::= type of Structure_Base
    where (same(*\*:[structure_kind(*topic),SK_INTEGER()])
        ?? payload(*topic) isa $Integer_Payload !! false());

MDLL.Integer.Integer_Payload ::= type of Pair_of_Universal where
(
    is_neg    ::= first(*topic);
    magnitude ::= second(*topic);
    if is_neg isa $Boolean then
        if magnitude isa $Natural then
            if same(*\*:[magnitude,zero()]) then
                same(*\*:[is_neg,false()])
            else true()
        else false()
    else false();
);

MDLL.Integer.integer ::= function
    --> Integer <-- Integer_Payload
    : \*:[SK_INTEGER(),topic];

MDLL.Integer.is_neg ::= function --> Boolean <-- Integer
    : first(*payload(*topic));

MDLL.Integer.magnitude ::= function
    --> Natural <-- Integer
    : second(*payload(*topic));

`#########################################################################`

MDLL.String ::= type of Structure_Base
    where (same(*\*:[structure_kind(*topic),SK_STRING()])
        ?? payload(*topic) isa $String_Payload !! false());

MDLL.String.String_Payload ::= type of Universal
    where (is_empty(*topic) ?? true()
        !! first(*topic) isa $Integer_Payload
        ?? 0(*nonfirst(*topic)) !! false());

MDLL.String.string ::= function
    --> String <-- String_Payload
    : \*:[SK_STRING(),topic];

MDLL.String.Universal_of_String_Payloads ::= type of Universal
    where (is_empty(*topic) ?? true() !! first(*topic) isa $String_Payload
        ?? 0(*nonfirst(*topic)) !! false());

`#########################################################################`

MDLL.Array ::= type of Structure_Base
    where (same(*\*:[structure_kind(*topic),SK_ARRAY()]));

MDLL.Array.array ::= function --> Array <-- Universal
    : \*:[SK_ARRAY(),topic];

`#########################################################################`

MDLL.Heading ::= type of Structure_Base
    where (same(*\*:[structure_kind(*topic),SK_HEADING()])
        ?? payload(*topic) isa $Heading_Payload !! false());

MDLL.Heading.Heading_Payload ::= type of Universal_of_String_Payloads
    where (elems_in_order(*topic));

MDLL.Heading.heading ::= function
    --> Heading <-- Heading_Payload
    : \*:[SK_HEADING(),topic];

`#########################################################################`

MDLL.Renaming ::= type of Structure_Base
    where (same(*\*:[structure_kind(*topic),SK_RENAMING()])
        ?? payload(*topic) isa $Renaming_Payload !! false());

MDLL.Renaming.Renaming_Payload ::= type of Pair_of_Universal where
(
    after  ::= first(*topic);
    before ::= second(*topic);
    if after isa $Heading_Payload then
        if before isa $Universal_of_String_Payloads then
            same(*\*:[count(*after),count(*before)])
        else false()
    else false();
);

MDLL.Renaming.renaming ::= function
    --> Renaming <-- Renaming_Payload
    : \*:[SK_RENAMING(),topic];

MDLL.Renaming.renaming_after ::= function
    --> Heading_Payload <-- Renaming : first(*payload(*topic));

MDLL.Renaming.renaming_before ::= function
    --> Universal_of_String_Payloads <-- Renaming
    : second(*payload(*topic));

`#########################################################################`

MDLL.Tuple ::= type of Structure_Base
    where (same(*\*:[structure_kind(*topic),SK_TUPLE()])
        ?? payload(*topic) isa $Tuple_Payload !! false());

MDLL.Tuple.Tuple_Payload ::= type of Pair_of_Universal where
(
    heading ::= first(*topic);
    body    ::= second(*topic);
    if heading isa $Heading_Payload then
        same(*\*:[count(*heading),count(*body)])
    else false();
);

MDLL.Tuple.tuple ::= function
    --> Tuple <-- Tuple_Payload
    : \*:[SK_TUPLE(),topic];

MDLL.Tuple.tuple_heading ::= function
    --> Heading_Payload <-- Tuple : first(*payload(*topic));

MDLL.Tuple.tuple_body ::= function --> Universal <-- Tuple
    : second(*payload(*topic));

`#########################################################################`

MDLL.Relation ::= type of Structure_Base
    where (same(*\*:[structure_kind(*topic),SK_RELATION()])
        ?? payload(*topic) isa $Relation_Payload !! false());

MDLL.Relation.Relation_Payload ::= type of Pair_of_Universal where
(
    heading ::= first(*topic);
    body    ::= second(*topic);
    if heading isa $Heading_Payload then
        if is_empty(*body) then
            true()
        else if same(*\*:[count(*heading),count(*first(*body))]) then
            if every_elem_same_count(*body) then
                elems_in_order(*body)
            else false()
        else false()
    else false();
);

MDLL.Relation.relation ::= function
    --> Relation <-- Relation_Payload
    : \*:[SK_RELATION(),topic];

MDLL.Relation.relation_heading ::= function
    --> Heading_Payload <-- Relation : first(*payload(*topic));

MDLL.Relation.relation_body ::= function
    --> Universal <-- Relation : second(*payload(*topic));

`#########################################################################`

MDLL.Identifier ::= type of Structure_Base
    where (same(*\*:[structure_kind(*topic),SK_IDENTIFIER()])
        ?? payload(*topic) isa $Identifier_Payload !! false());

MDLL.Identifier.Identifier_Payload ::= type of Universal where
(
    if same(*\*:[count(*topic),N4()]) then
      (
        pkg_name_base       ::= elem(*\*:[topic,zero()]);
        pkg_name_ext        ::= elem(*\*:[topic,N1()]);
        rel_starts_n_lev_up ::= elem(*\*:[topic,N2()]);
        path_beneath_pkg    ::= elem(*\*:[topic,N3()]);
        <-- if pkg_name_base isa $Universal_of_String_Payloads then
                if pkg_name_ext isa $Universal_of_String_Payloads then
                    if rel_starts_n_lev_up isa $Natural then
                        if path_beneath_pkg isa $Universal_of_String_Payloads then
                            if is_empty(*pkg_name_base) then
                                if is_empty(*pkg_name_ext) then
                                    if is_empty(*path_beneath_pkg) then
                                        is_zero(*rel_starts_n_lev_up)
                                    else true()
                                else false()
                            else is_zero(*rel_starts_n_lev_up)
                        else false()
                    else false()
                else false()
            else false()
            ;
      )
    else false()
);

MDLL.Identifier.identifier ::= function
    --> Identifier <-- Identifier_Payload
    : \*:[SK_IDENTIFIER(),topic];

MDLL.Identifier.pkg_name_base ::= function
    --> Universal_of_String_Payloads <-- Identifier
    : elem(*\*:[payload(*topic),zero()]);

MDLL.Identifier.pkg_name_ext ::= function
    --> Universal_of_String_Payloads <-- Identifier
    : elem(*\*:[payload(*topic),N1()]);

MDLL.Identifier.rel_starts_n_lev_up ::= function
    --> Natural <-- Identifier : elem(*\*:[payload(*topic),N2()]);

MDLL.Identifier.path_beneath_pkg ::= function
    --> Universal_of_String_Payloads <-- Identifier
    : elem(*\*:[payload(*topic),N3()]);

`#########################################################################`

MDLL.Identifier.Reference ::= type of Identifier where
(
    if is_empty(*pkg_name_base(*topic)) then
        false()
    else if is_empty(*pkg_name_ext(*topic)) then
        false()
    else if is_zero(*rel_starts_n_lev_up(*topic)) then
        true()
    else false()
);

`#########################################################################`

MDLL.Universal.every_elem_isa ::= function
    --> Boolean <-- Pair_of_Universal
    requires (second(*topic) isa $Reference)
: (
    list ::= first(*topic);
    type ::= second(*topic);
    <-- is_empty(*list) ?? true()
        !! first(*list) isa type ?? 0(*\*:[nonfirst(*list),type]) !! false()
);

`#########################################################################`

MDLL.Capsule ::= type of Structure_Base
    where (same(*\*:[structure_kind(*topic),SK_CAPSULE()])
        ?? payload(*topic) isa $Capsule_Payload !! false());

MDLL.Capsule.Capsule_Payload ::= type of Pair_of_Universal
    where (first(*topic) isa $Reference_Payload
        ?? second(*topic) isa $Tuple_Payload !! false());

MDLL.Capsule.capsule ::= function
    --> Capsule <-- Capsule_Payload
    : \*:[SK_CAPSULE(),topic];

MDLL.Capsule.capsule_type ::= function
    --> Reference_Payload <-- Capsule : first(*payload(*topic));

MDLL.Capsule.capsule_attrs ::= function
    --> Tuple_Payload <-- Capsule : second(*payload(*topic));

`#########################################################################`

MDLL.Stream ::= type of Structure_Base
    where (same(*\*:[structure_kind(*topic),SK_STREAM()])
        ?? payload(*topic) isa $Integer_Payload !! false());

MDLL.Stream.stream ::= function
    --> Stream <-- Integer_Payload
    : \*:[SK_STREAM(),topic];

`#########################################################################`

MDLL.External ::= type of Structure_Base
    where (same(*\*:[structure_kind(*topic),SK_EXTERNAL()]));

MDLL.External.external ::= function
    --> External <-- Universal : \*:[SK_EXTERNAL(),topic];

`#########################################################################`

`Two values are normally considered to have the same low-level type only
   if they are both values of the same one of the types {Boolean, Integer,
   String, Array, SC_Heading, SC_Renaming, Tuple, Relation, SC_Identifier,
   Capsule, Stream, External}, but as a special case, we treat each value
   that isn't of any of those types as having its own singleton type, and
   so every type system value has the same low-level type as itself.`

MDLL.Universal.same_low_level_type ::= function
    --> Boolean <-- Pair_of_Universal is_commutative
: (
    lhs ::= first(*topic);
    rhs ::= second(*topic);
    <-- if lhs isa $Boolean then
            rhs isa $Boolean
        else if lhs isa $Structure then
            if rhs isa $Structure then
                same(*\*:[structure_kind(*lhs),structure_kind(*rhs)])
            else false()
        else same(*\*:[lhs,rhs])
);
