Muldis_D:PT_STD:Unicode({1..6.2},UTF-8,canon):"http://muldis.com":0;

package UC ::= Muldis_D::Unicode:"http://muldis.com":0;

using MD ::= Muldis_D:"http://muldis.com":0;

searching [MD,UC];

/*************************************************************************/

UC.Text.Unicode_Codepoint ::= type of Integer
    where (.0 in 0..0x10FFFF);

UC.Text.Unicode_Codepoints ::= type of String
    where (.0->every_elem_isa($Unicode_Codepoint));

UC.Text.Unicode ::= type of Text
    where (.0->maximal_chars() isa $Unicode_Codepoints);

UC.Text.Unicode.Canon ::= type of Text.Unicode
    where ...;

UC.Text.Unicode.Compat ::= type of Text.Unicode.Canon
    where ...;

/*************************************************************************/

UC.Text.unicode_codes ::= function
    (Unicode_Codepoints <-- Text.Unicode) : .0->maximal_chars();

UC.Text.from_unicode_codes ::= function
    (Text.Unicode <-- Unicode_Codepoints) : .0->from_maximal_chars();

UC.Text.unicode_utf8_octets ::= function
    (... <-- Text.Unicode) : ...;

UC.Text.from_unicode_utf8_octets ::= function
    (Text.Unicode <-- ...) : ...;

/*************************************************************************/

UC.Universal."≠" ::= "!=";

/*************************************************************************/

UC.Boolean."⊥" ::= false;

UC.Boolean."⊤" ::= true;

UC.Boolean."¬" ::= not;

UC.Boolean."∧" ::= and;

UC.Boolean."⊼"|"↑" ::= nand;

UC.Boolean."∨" ::= or;

UC.Boolean."⊽"|"↓" ::= nor;

UC.Boolean."↔" ::= xnor;

UC.Boolean."⊻"|"↮" ::= xor;

UC.Boolean."→" ::= imp;

UC.Boolean."↛" ::= nimp;

UC.Boolean."←" ::= if;

UC.Boolean."↚" ::= nif;
