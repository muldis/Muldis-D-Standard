Muldis_D:Plain_Text:"http://muldis.com":"0.200";

script ASCII;

package_segment Muldis_D:"http://muldis.com":"0.200":Capsule;

`#########################################################################`

MD.Capsule."" ::= type of Universal where topic --> \^isa_Capsule default ...;

`#########################################################################`

`Note that "=>" is a keyword; this function is a shim over it.`

MD.Capsule."=>" ::= function --> Capsule <-- (SC_Reference, Tuple)
    : .0=>.1;

`Note that while "select_Capsule" is more descriptive, in practice the
   =>/select dyadic is meant to be a direct analogy to "new" in OO
   languages, which takes a class-name + attr-list pair, and we want our
   syntax to be nicely terse.`

MD.Capsule.select ::= synonym of "=>";

MD.Capsule.named."=>" ::= function
    --> Capsule <-- (type : SC_Reference, attrs : Tuple)
    : .0=>.1;

MD.Capsule.Capsule_type ::= function --> SC_Reference <-- (Capsule)
    : topic --> \^Capsule_type;

MD.Capsule."%" ::= function --> Tuple <-- (Capsule)
    : topic --> \^Capsule_attrs;

MD.Capsule.attrs ::= synonym of "%";

`#########################################################################`

`Note that ".>" is a special syntax used like "myrat.>numerator".`

MD.Capsule.".>" ::= function --> Universal <-- (Capsule, SC_Name)
    : topic --> \^Capsule_attr;

MD.Capsule.attr ::= synonym of ".>";

`Note that ".>?" is a special syntax used like "myval.>?myoptattr".`

MD.Capsule.".>?" ::= function --> Boolean <-- (Capsule, SC_Name)
    : topic --> \^Capsule_has_attr;

MD.Capsule.has_attr ::= synonym of ".>?";

`#########################################################################`

MD.Capsule.has_attrs ::= function --> Boolean <-- (Capsule, SC_Attrs_Spec)
    : has_attrs(%.0,.1);

MD.Capsule.has_just_attrs ::= function --> Boolean <-- (Capsule, SC_Attrs_Spec)
    : has_just_attrs(%.0,.1);

`#########################################################################`

`Note that due to the 'type singleton' keyword existing, it is unlikely
   that anyone would actually declare types with "type of Singleton";
   however "Singleton" might still be used in some constraints.`

MD.Capsule.Singleton ::= type of Capsule where %topic = \%{};
