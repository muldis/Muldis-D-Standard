Muldis_D:Plain_Text:ASCII:"http://muldis.com":"0.200";

package_segment Muldis_D:"http://muldis.com":"0.200":Capsule;

/*************************************************************************/

MD.Capsule ::= type of Universal where \*^[isa_Capsule,topic] default ...;

/*************************************************************************/

/* Note that "=>" is a keyword; this function is a shim over it. */

MD.Capsule."=>"|select_Capsule ::= function
    (Capsule <-- 0|type : SC_Reference, 1|attrs : Tuple) : .0=>.1;

MD.Capsule.Capsule_type ::= function (SC_Reference <-- Capsule)
    : \*^[Capsule_type,.0];

MD.Capsule."%"|attrs ::= function (Tuple <-- Capsule)
    : \*^[Capsule_attrs,.0];

/*************************************************************************/

MD.Capsule.attr ::= function
    (Universal <-- Capsule, 1|name : SC_Name) : attr(%.0,.1);

/*************************************************************************/

MD.Capsule.has_attrs ::= function (Boolean <-- Capsule, SC_Attrs_Spec)
    : has_attrs(%.0,.1);

MD.Capsule.has_just_attrs ::= function (Boolean <-- Capsule, SC_Attrs_Spec)
    : has_just_attrs(%.0,.1);

/*************************************************************************/

/* Note that due to the singleton_type keyword existing, it is unlikely
   that anyone would actually declare types with "type of Singleton";
   however "Singleton" might still be used in some constraints. */

MD.Capsule.Singleton ::= type of Capsule where %topic = \%{};
