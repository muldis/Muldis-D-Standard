Muldis_D:Plain_Text:ASCII:"http://muldis.com":"0.200";

package_segment Muldis_D:"http://muldis.com":"0.200":Capsule;

/*************************************************************************/

MD.Capsule ::= type of Universal where \*^[isa_Capsule,topic] default ...;

/*************************************************************************/

/* Note that "=>" is a keyword; this function is a shim over it. */

MD.Capsule."=>" ::= function --> Capsule <-- (SC_Reference, Tuple)
    : .0=>.1;

MD.Capsule.select_Capsule ::= synonym of "=>";

MD.Capsule.named."=>" ::= function
    --> Capsule <-- (type : SC_Reference, attrs : Tuple)
    : .0=>.1;

MD.Capsule.Capsule_type ::= function --> SC_Reference <-- (Capsule)
    : \*^[Capsule_type,.0];

MD.Capsule."%" ::= function --> Tuple <-- (Capsule)
    : \*^[Capsule_attrs,.0];

MD.Capsule.attrs ::= synonym of "%";

/*************************************************************************/

/* Note that ".>" is a special syntax used like "myrat.>numerator". */

MD.Capsule.".>" ::= function --> Universal <-- (Capsule, SC_Name)
    : \*^[Capsule_attr,.0,.1];

MD.Capsule.attr ::= synonym of ".>";

/* Note that ".>?" is a special syntax used like "myval.>?myoptattr". */

MD.Capsule.".>?" ::= function --> Boolean <-- (Capsule, SC_Name)
    : \*^[Capsule_has_attr,.0,.1];

MD.Capsule.has_attr ::= synonym of ".>?";

/*************************************************************************/

MD.Capsule.has_attrs ::= function --> Boolean <-- (Capsule, SC_Attrs_Spec)
    : has_attrs(%.0,.1);

MD.Capsule.has_just_attrs ::= function --> Boolean <-- (Capsule, SC_Attrs_Spec)
    : has_just_attrs(%.0,.1);

/*************************************************************************/

/* Note that due to the 'type singleton' keyword existing, it is unlikely
   that anyone would actually declare types with "type of Singleton";
   however "Singleton" might still be used in some constraints. */

MD.Capsule.Singleton ::= type of Capsule where %topic = \%{};
