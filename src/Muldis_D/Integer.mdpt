Muldis_D:PT_STD:ASCII:"http://muldis.com":0;

package_segment Muldis_D:"http://muldis.com":0:Integer;

/*************************************************************************/

/* TODO - THIS FILE IS OUT OF DATE - INTEGERS NOW STRUCTURES NOT OPAQUE. */

Muldis_D.Integral ::= abstract_type composes Numeric;

Muldis_D.Integer ::= synonym of LL_Integer
    composes Integral composes Cardinal composes Ordinal;

Muldis_D.Integer.Int ::= synonym of Integer;

Muldis_D.Integer.NN ::= subset_type of Integer where (.0 >= 0);

Muldis_D.Integer.P ::= subset_type of Integer.NN where (.0 != 0);

/*************************************************************************/

Muldis_D.Integer."<=>"|order ::= function
    (Order <-- 0|lhs : Integer, 1|rhs : Integer)
    implements Ordered."<=>"
: (
       .0 = .1            ?? :$Order.Same
    !! LL_in_order(.0,.1) ?? :$Order.Less
    !!                       :$Order.More
);

/*************************************************************************/

Muldis_D.Integer."--"|pred|dec ::= function (Integer <-- 0 : Integer)
    implements Ordinal."--" : (.0 - 1);

Muldis_D.Integer."++"|succ|inc ::= function (Integer <-- 0 : Integer)
    implements Ordinal."++" : (.0 + 1);

/*************************************************************************/

Muldis_D.Integer.monadic."-"|opposite|additive_inverse ::= function
    (Integer <-- 0 : Integer) implements Numeric.monadic."-" : (0 - .0);

Muldis_D.Integer.abs ::= function (Integer <-- 0 : Integer) : (...);

Muldis_D.Integer."+"|plus|sum ::= function
    (Integer <-- 0 : Integer, 1 : Integer)
    implements Numeric."+"
    is_commutative is_associative identity 0
    : (...);

Muldis_D.Integer."-"|minus|diff ::= function () : (...);

Muldis_D.Integer."|-|"|abs_minus|abs_diff ::= function () : (...);

Muldis_D.Integer."*"|product ::= function () : (...);

Muldis_D.Integer."/"|frac_quotient ::= function () : (...);

Muldis_D.Integer."div"|whole_quotient ::= function () : (...);

Muldis_D.Integer."mod"|remainder ::= function () : (...);

Muldis_D.Integer.quot_and_rem ::= function () : (...);

/*************************************************************************/

Muldis_D.Integer.power ::= function () : (...);

Muldis_D.Integer.factorial ::= function (Integer.P <-- 0 : Integer.P) :
    ([*] enumerated(1 .. .0));
