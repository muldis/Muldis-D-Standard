Muldis_D:Plain_Text:ASCII:"http://muldis.com":"0.200";

package_segment Muldis_D:"http://muldis.com":"0.200":Source_Code;

/* THIS FILE IS OUTDATED; THERE IS NO Muldis_D::Low_Level PACKAGE! */

/*************************************************************************/

/* Source_Code is a closed union that only the system can define, while
   Source_Code_Meta is an open union that any users may add types to,
   subject that each of those types must be a Capsule subtype. */

MD.Source_Code."" ::=
    type union {SC_Heading,SC_Renaming,SC_Identifier,...,SC_Package,...} default ...;

MD.Source_Code.Source_Code_Meta.AT ::= type abstract;

MD.Source_Code.Source_Code_Meta."" ::=
    type of Capsule where topic isa $Source_Code_Meta.AT;
    /* Consider "intersection {Source_Code_Meta.AT,Capsule}" instead. */

/*************************************************************************/

/* SC_Heading example: \~{name,age,phone} */

MD.Source_Code.SC_Heading ::= synonym of ::MDLL.Heading;

/* SC_Renaming example: \<-{newname:oldname} or \<-{a:b,b:a,x:y} */

MD.Source_Code.SC_Renaming ::= synonym of ::MDLL.Renaming;

/* General forms of SC_Identifier:
   - identity - \$Pkg::Name::Base:pkg:name:ext.path.beneath.pkg
   - absolute - \$::Pkg::Name::Base.path.beneath.pkg
   - relative - \$rel_starts_n_lev_up.path.beneath.pkg
   - floating - \$path.beneath.pkg
   - pkg_name_base is everything up to first ":" or ".", elems sep by "::"
        - only applies if at least 1 "::" exists; leading one can indicate;
        or if at least 1 ":" exists
   - pkg_name_ext is everything from first ":" to first ".", sep by ":"
   - rel_starts_n_lev_up is everything up to first "."
        - only applies if no "::" exists and leading char is bareword digit
   - path_beneath_pkg is everything from first ".", elems sep by "."
        - or its the whole thing if there is no "::", no leading bw digit
   - Each element may be double-quot if necessary to prevent parse issues
        for example authority likely quoted as has ":", version if has ".".
   - Remove "\$" for generalized routine-call syntax eg "foo()".
   */

MD.Source_Code.SC_Identifier ::= synonym of ::MDLL.Identifier;

/* SC_Reference example: \$Muldis_D:"http://muldis.com":"0.200".Integer.sum */

MD.Source_Code.SC_Reference ::= synonym of ::MDLL.Reference composes Ordered;

/*************************************************************************/

/* SC_Name example: \~{age} */

MD.Source_Code.SC_Name ::= type of SC_Heading
    where (::MDLL.Universal.count(*::MDLL.Structure.payload(*topic)) = 1);

/*************************************************************************/

/* SC_Pkg_Canon_Name example: Muldis_D:"http://muldis.com":"0.200" */

MD.Source_Code.SC_Pkg_Canon_Name ::= type of SC_Reference
    where ::MDLL.Universal.is_empty(*::MDLL.Identifier.path_beneath_pkg(*topic));

/* SC_Pkg_Local_Alias example: MD */

MD.Source_Code.SC_Pkg_Local_Alias ::= type of SC_Identifier
    where (!::MDLL.Universal.is_empty(*::MDLL.Identifier.pkg_name_base(*topic))
        and ::MDLL.Universal.is_empty(*::MDLL.Identifier.pkg_name_ext(*topic))
        and ::MDLL.Natural.is_zero(*::MDLL.Identifier.rel_starts_n_lev_up(*topic))
        and ::MDLL.Universal.is_empty(*::MDLL.Identifier.path_beneath_pkg(*topic)));

MD.Source_Code.SC_Pkg_Local_Aliases ::= type of Array
    where every_elem_isa(topic,$SC_Pkg_Local_Alias);

/*************************************************************************/

MD.Source_Code.SC_Pkg_Decl_Map ::= type of Capsule where
(
    has_attrs(topic,\%{
        local_alias : $SC_Pkg_Local_Alias,
        canon_name  : $SC_Pkg_Canon_Name,
    })
);

MD.Source_Code.SC_Pkg_Decl_Maps ::= type of Array
    where every_elem_isa(topic,$SC_Pkg_Decl_Map);

/*************************************************************************/

MD.Source_Code.SC_Package ::= type of Capsule where
(
    has_attrs(topic,\%{
        package   : $SC_Pkg_Decl_Map,
        using     : $SC_Pkg_Decl_Maps,
        searching : $SC_Pkg_Local_Aliases,
        segments  : $SC_Package_Segments,
        materials : $SC_Materials,
    })
);

MD.Source_Code.SC_Package_Segments ::=
    Array where (every_elem_isa(topic,$SC_Pkg_Local_Alias));

MD.Source_Code.SC_Package_Segment ::= type of Capsule where
(
    Capsule_type(topic) = $1
    and
    has_attrs(%topic,\%{
        materials : $SC_Materials,
    })
);

MD.Source_Code.SC_Schema ::= type of Capsule where
(
    has_attrs(topic,\%{
        materials : $SC_Materials,
    })
);
