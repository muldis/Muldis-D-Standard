Muldis_D:PT_STD:ASCII:"http://muldis.com":0;

package_segment Muldis_D:"http://muldis.com":0:Source_Code;

/*************************************************************************/

/* Source_Code is a closed union that only the system can define, while
   Source_Code_Meta is an open union that any users may add types to,
   subject that each of those types must be a Capsule subtype. */

MD.Source_Code ::=
    SC_Heading|SC_Renaming|SC_Identifier|...|SC_Package|... default ...;

MD.Source_Code.Source_Code_Meta.AT ::= abstract_type;

MD.Source_Code.Source_Code_Meta ::= Source_Code_Meta.AT&Capsule;

/*************************************************************************/

/* SC_Heading example: \~{name,age,phone} */

MD.Source_Code.SC_Heading ::= synonym of LL_Heading;

/* SC_Renaming example: \<-{newname:oldname} or \<-{a:b,b:a,x:y} */

MD.Source_Code.SC_Renaming ::= synonym of LL_Renaming;

/* General forms of SC_Identifier:
   - canon    - \$=Pkg::Name::Base:pkg:name:ext.path.beneath.pkg
   - local    - \$~Pkg::Name::Base.path.beneath.pkg
   - relative - \$<rel_starts_n_lev_up>path.beneath.pkg
   - search   - \$?path.beneath.pkg
   - pkg_name_base is everything up to first ":" or ".", elems sep by "::"
   - pkg_name_ext is everything from first ":" to first ".", sep by ":"
   - path.beneath.pkg is everything from first ".", elems sep by "."
   - Each element may be double-quoted if necessary to prevent parse issues
        for example authority likely quoted as has ":", version if has ".".
   - Replace "\$" with "&" for generalized routine-call syntax eg "&?foo()"
        but if the "&" is left out then "search" is assumed for "foo()".
   */

MD.Source_Code.SC_Identifier ::= synonym of LL_Identifier;

/* SC_Reference example: \$=Muldis_D:"http://muldis.com":0.Integer.sum */

MD.Source_Code.SC_Reference ::= synonym of LL_Reference composes Ordered;

/*************************************************************************/

/* SC_Name example: \~{age} */

MD.Source_Code.SC_Name ::= type of SC_Heading
    where (LL_count(*LL_payload(*topic)) = 1);

/*************************************************************************/

/* SC_Pkg_Canon_Name example: Muldis_D:"http://muldis.com":0 */

MD.Source_Code.SC_Pkg_Canon_Name ::= type of SC_Reference
    where LL_empty(*LL_ref_path_beneath_pkg(*topic));

/* SC_Pkg_Local_Alias example: MD */

MD.Source_Code.SC_Pkg_Local_Alias ::= type of SC_Identifier
    where (LL_identifier_kind(*topic) = LL_IK_ABSOLUTE()
        and LL_empty(*LL_ident_path_beneath_pkg(*topic)));

MD.Source_Code.SC_Pkg_Local_Aliases ::= type of Array
    where topic->every_elem_isa($SC_Pkg_Local_Alias);

/*************************************************************************/

MD.Source_Code.SC_Pkg_Decl_Map ::= type of Capsule where
(
    has_attrs(topic,\%{
        local_alias : $SC_Pkg_Local_Alias,
        canon_name  : $SC_Pkg_Canon_Name,
    })
);

MD.Source_Code.SC_Pkg_Decl_Maps ::= type of Array
    where topic->every_elem_isa($SC_Pkg_Decl_Map);

/*************************************************************************/

MD.Source_Code.SC_Package ::= type of Capsule where
(
    has_attrs(topic,\%{
        package   : $SC_Pkg_Decl_Map,
        using     : $SC_Pkg_Decl_Maps,
        searching : $SC_Pkg_Local_Aliases,
        segments  : $SC_Package_Segments,
        materials : $SC_Materials,
    })
);

MD.Source_Code.SC_Package_Segments ::=
    Array where (topic->every_elem_isa($SC_Pkg_Local_Alias));

MD.Source_Code.SC_Package_Segment ::= type of Capsule where
(
    Capsule_type(topic) = $SC_Package_Segment
    and
    has_attrs(%topic,\%{
        materials : $SC_Materials,
    })
);

MD.Source_Code.SC_Schema ::= type of Capsule where
(
    has_attrs(topic,\%{
        materials : $SC_Materials,
    })
);
