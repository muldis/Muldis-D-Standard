Muldis_D:PT_STD:ASCII:"http://muldis.com":0;

package_segment Muldis_D:"http://muldis.com":0:Low_Level;

/*************************************************************************/

Muldis_D.Low_Level.LL_Integer ::= special_type;

Muldis_D.Low_Level.LL_Integer_NN ::= subset_type of LL_Integer
    where (LL_Integers_in_order(0,.0));

Muldis_D.Low_Level.LL_Integer_P ::= subset_type of LL_Integer_NN
    where (LL_same_Integer(.0,0) ?? false !! true);

/*************************************************************************/

Muldis_D.Low_Level.LL_List ::= special_type;

Muldis_D.Low_Level.LL_List_NE ::= subset_type of LL_List
    where (LL_List_empty(.0) ?? false !! true);

Muldis_D.Low_Level.LL_List_of_Lists ::= subset_type of LL_List
    where (LL_every_List_elem_isa(.0,$LL_List));

/*************************************************************************/

Muldis_D.Low_Level.LL_Universal ::= LL_Integer|LL_List;

/*************************************************************************/

Muldis_D.Low_Level.LL_Structure_Base ::= subset_type of LL_List
    where (LL_same_Integer(LL_List_elem_count(.0),2)
        ?? LL_List_elem(.0,0) isa $LL_Integer_P !! false);

Muldis_D.Low_Level.LL_Structure ::=
    LL_String|LL_Array|LL_Boolean|LL_Heading|LL_Tuple
    |LL_Relation|LL_Identifier|LL_Capsule|LL_Stream|LL_External;

Muldis_D.Low_Level.LL_Nonstructure ::= LL_List-LL_Structure;

/*************************************************************************/

Muldis_D.Low_Level.LL_String ::= subset_type of LL_Structure_Base
    where (LL_same_Integer(LL_List_elem(.0,0),1)
        ?? LL_List_elem(.0,1) isa $LL_String_Payload !! false);

Muldis_D.Low_Level.LL_String_Payload ::= subset_type of LL_List
    where (LL_every_List_elem_isa(.0,$LL_Integer));

Muldis_D.Low_Level.LL_List_of_String_Payloads ::= subset_type of LL_List
    where (LL_every_List_elem_isa(.0,$LL_String_Payload));

/*************************************************************************/

Muldis_D.Low_Level.LL_Array ::= subset_type of LL_Structure_Base
    where (LL_same_Integer(LL_List_elem(.0,0),2)
        ?? LL_List_elem(.0,1) isa $LL_List !! false);

/*************************************************************************/

Muldis_D.Low_Level.LL_Boolean ::= subset_type of LL_Structure_Base
    where (LL_same_Integer(LL_List_elem(.0,0),3)
        ?? LL_List_elem(.0,1) isa $LL_Boolean_Payload !! false);

Muldis_D.Low_Level.LL_Boolean_Payload ::= subset_type of LL_Integer
    where (LL_same_Integer(.0,0) ?? true !! LL_same_Integer(.0,1));

/*************************************************************************/

Muldis_D.Low_Level.LL_Heading ::= subset_type of LL_Structure_Base
    where (LL_same_Integer(LL_List_elem(.0,0),4)
        ?? LL_List_elem(.0,1) isa $LL_Heading_Payload !! false);

Muldis_D.Low_Level.LL_Heading_Payload ::=
    subset_type of LL_List_of_String_Payloads
    where (LL_List_elems_in_order(.0));

/*************************************************************************/

Muldis_D.Low_Level.LL_Renaming ::= subset_type of LL_Structure_Base
    where (LL_same_Integer(LL_List_elem(.0,0),5)
        ?? LL_List_elem(.0,1) isa $LL_Renaming_Payload !! false);

Muldis_D.Low_Level.LL_Renaming_Payload ::= subset_type of LL_List where
(
    if LL_same_Integer(LL_List_elem_count(.0),2) then
      (
        after ::= LL_List_elem(.0,0);
        before ::= LL_List_elem(.0,1);
        if after isa $LL_Heading_Payload then
            if before isa $LL_List_of_String_Payloads then
                LL_same_Integer(LL_List_elem_count(after),
                    LL_List_elem_count(before))
            else false
        else false;
      )
    else false;
);

/*************************************************************************/

Muldis_D.Low_Level.LL_Tuple ::= subset_type of LL_Structure_Base
    where (LL_same_Integer(LL_List_elem(.0,0),6)
        ?? LL_List_elem(.0,1) isa $LL_Tuple_Payload !! false);

Muldis_D.Low_Level.LL_Tuple_Payload ::= subset_type of LL_List where
(
    if LL_same_Integer(LL_List_elem_count(.0),2) then
      (
        heading ::= LL_List_elem(.0,0);
        body ::= LL_List_elem(.0,1);
        if heading isa $LL_Heading_Payload then
            if body isa $LL_List then
                LL_same_Integer(LL_List_elem_count(heading),
                    LL_List_elem_count(body))
            else false
        else false;
      )
    else false;
);

/*************************************************************************/

Muldis_D.Low_Level.LL_Relation ::= subset_type of LL_Structure_Base
    where (LL_same_Integer(LL_List_elem(.0,0),7)
        ?? LL_List_elem(.0,1) isa $LL_Relation_Payload !! false);

Muldis_D.Low_Level.LL_Relation_Payload ::= subset_type of LL_List where
(
    if LL_same_Integer(LL_List_elem_count(.0),2) then
      (
        heading ::= LL_List_elem(.0,0);
        body ::= LL_List_elem(.0,1);
        if heading isa $LL_Heading_Payload then
            if body isa $LL_List_of_Lists then
                if LL_List_empty(body) then
                    true
                else if LL_every_List_elem_same_count(body) then
                    if LL_same_Integer(LL_List_elem_count(heading),
                        LL_List_elem_count(LL_List_first_elem(body))) then
                      (
                        LL_List_elems_in_order(body)
                      )
                    else false
                else false
            else false
        else false;
      )
    else false;
);

/*************************************************************************/

Muldis_D.Low_Level.LL_Identifier ::= subset_type of LL_Structure_Base
    where (LL_same_Integer(LL_List_elem(.0,0),8)
        ?? LL_List_elem(.0,1) isa $LL_Identifier_Payload !! false);

Muldis_D.Low_Level.LL_Identifier_Payload ::= subset_type of LL_List where
    (...);

Muldis_D.Low_Level.LL_Global_Identifier ::= subset_type of LL_Identifier
    where (LL_List_elem(.0,1) isa $LL_Global_Identifier_Payload);

Muldis_D.Low_Level.LL_Global_Identifier_Payload ::=
    subset_type of LL_Identifier_Payload where (...);

/*************************************************************************/

Muldis_D.Low_Level.LL_Capsule ::= subset_type of LL_Structure_Base
    where (LL_same_Integer(LL_List_elem(.0,0),9)
        ?? LL_List_elem(.0,1) isa $LL_Capsule_Payload !! false);

Muldis_D.Low_Level.LL_Capsule_Payload ::= subset_type of LL_List where
(
    if LL_same_Integer(LL_List_elem_count(.0),2) then
        LL_List_elem(.0,0) isa $LL_Global_Identifier_Payload
            ?? LL_List_elem(.0,1) isa $LL_Tuple_Payload !! false
    else false;
);

/*************************************************************************/

Muldis_D.Low_Level.LL_Stream ::= subset_type of LL_Structure_Base
    where (LL_same_Integer(LL_List_elem(.0,0),10)
        ?? LL_List_elem(.0,1) isa $LL_Integer !! false);

/*************************************************************************/

Muldis_D.Low_Level.LL_External ::= subset_type of LL_Structure_Base
    where (LL_same_Integer(LL_List_elem(.0,0),11));

/*************************************************************************/

Muldis_D.Low_Level.LL_same_Integer ::= function
    (LL_Boolean <-- 0 : LL_Integer, 1 : LL_Integer) is_commutative : (...);

Muldis_D.Low_Level.LL_Integers_in_order ::= function
    (LL_Boolean <-- 0|lhs : LL_Integer, 1|rhs : LL_Integer) : (...);

/*************************************************************************/

Muldis_D.Low_Level.LL_List_empty ::= function
    (LL_Boolean <-- 0|list : LL_List)
    : (LL_same_Integer(LL_List_elem_count(.0),0));

Muldis_D.Low_Level.LL_List_elem_count ::= function
    (LL_Integer_NN <-- 0|list : LL_List) : (...);

/* Note that LL_List_elem throws an exception if index out of bounds. */
Muldis_D.Low_Level.LL_List_elem ::= function
    (LL_Universal <-- 0|list : LL_List, 1|index : LL_Integer_NN) : (...);

Muldis_D.Low_Level.LL_List_first_elem ::= function
    (LL_Universal <-- 0|list : LL_List_NE) : (LL_List_elem(.0,0));

Muldis_D.Low_Level.LL_List_nonfirst_elems ::= function
    (LL_List <-- 0|list : LL_List_NE) : (...);

Muldis_D.Low_Level.LL_List_pairwise_forall ::= function
    (LL_Boolean <-- 0|lhs : LL_List, 1|rhs: LL_List,
    2|function : LL_Global_Identifier) : (...);

Muldis_D.Low_Level.LL_every_List_elem_same_count ::= function
    (LL_Boolean <-- 0 : LL_List_of_Lists) : (...);

Muldis_D.Low_Level.LL_every_List_elem_isa ::= function
    (LL_Boolean <-- 0|list : LL_List, 1|type : LL_Global_Identifier)
    : (...);

/*************************************************************************/

Muldis_D.Low_Level.LL_same_List ::= function
    (LL_Boolean <-- 0 : LL_List, 1 : LL_List) is_commutative
: (LL_same_Integer(LL_List_elem_count(.0),LL_List_elem_count(.1))
    ?? LL_List_pairwise_forall(.0,.1,$"LL_same_Universal") !! false);

Muldis_D.Low_Level.LL_Lists_in_order ::= function
    (LL_Boolean <-- 0|lhs : LL_List, 1|rhs : LL_List)
: (
       LL_List_empty(.0) ?? true
    !! LL_List_empty(.1) ?? false
    !! LL_same_Integer(LL_List_first_elem(.0), LL_List_first_elem(.1))
        ?? LL_Lists_in_order(LL_List_nonfirst_elems(.0),
            LL_List_nonfirst_elems(.1))
    !! LL_Universals_in_order(LL_List_first_elem(.0),
            LL_List_first_elem(.1))
);

Muldis_D.Low_Level.LL_List_elems_in_order ::= function
    (LL_Boolean <-- 0 : LL_List)
: (
       LL_Integers_in_order(LL_List_elem_count(.0),1)
        ?? true
    !! LL_Universals_in_order(LL_List_elem(.0,0),LL_List_elem(.0,1))
        ?? LL_List_elems_in_order(LL_List_nonfirst_elems(.0))
    !! false
);

/*************************************************************************/

Muldis_D.Low_Level.LL_same_Universal ::= function
    (LL_Boolean <-- 0 : LL_Universal, 1 : LL_Universal) is_commutative
: (
       (.0 isa $LL_Integer ?? .1 isa $LL_Integer !! false)
        ?? LL_same_Integer(.0,.1)
    !! (.0 isa $LL_List ?? .1 isa $LL_List !! false)
        ?? LL_same_List(.0,.1)
    !! false
);

Muldis_D.Low_Level.LL_Universals_in_order ::= function
    (LL_Boolean <-- 0|lhs : LL_Universal, 1|rhs : LL_Universal)
: (
       (.0 isa $LL_Integer ?? .1 isa $LL_Integer !! false)
        ?? LL_Integers_in_order(.0,.1)
    !! (.0 isa $LL_List ?? .1 isa $LL_List !! false)
        ?? LL_Lists_in_order(.0,.1)
    !! .0 isa $LL_Integer ?? true
    !! false
);

/*************************************************************************/
